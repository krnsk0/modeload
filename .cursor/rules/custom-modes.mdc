---
description:
globs:
alwaysApply: false
---
## 🎉 Found Custom Modes Configuration!

Location: Custom modes are stored in the SQLite database at:

text

Apply to scanner.md

~/Library/Application Support/Cursor/User/globalStorage/state.vscdb

Specific Path: Within the database, they're stored in the key:

text

Apply to scanner.md

src.vs.platform.reactivestorage.browser.reactiveStorageServiceImpl.persistentStorage.applicationUser

Storage Structure: Custom modes are stored in:

text

Apply to scanner.md

composerState.modes4[]

## Your Current Custom Modes

I can see you have one custom mode defined called "PLAN" plus the four built-in modes:

### Built-in Modes:

1. Agent (agent) - Plan, search, make edits, run commands

2. Ask (chat) - Ask Cursor questions about the context you add

3. Manual (edit) - Edit only specific files

4. Background (background) - Create background agent

### Your Custom Mode:

"PLAN" (ID: e94d8f3d-cf6d-49d1-ad5e-d0241284f1ad)

- Icon: chat

- Auto-run: disabled

- Auto-apply: enabled

- Auto-fix: enabled

- Enabled Tools: [1, 18, 3, 6, 8, 5, 16, 7, 11, 15] (these are tool IDs)

- Custom Rules: "only edit files in ./memory folder\n"

## Data Structure Schema

Each mode has this structure:

json

Apply to scanner.md

{

  "id": "unique-id",

  "name": "Display Name", 

  "icon": "icon-name",

  "description": "Description text",

  "thinkingLevel": "none|basic|advanced",

  "autoRun": true/false,

  "shouldAutoApplyIfNoEditTool": true/false,

  "autoFix": true/false,

  "enabledTools": [array of tool IDs],

  "enabledMcpServers": [array],

  "customRulesForAI": "custom instructions text"

}

## How to Access This Data

You can query the database using:

bash

Apply to scanner.md

Run

sqlite3 ~/Library/Application\ Support/Cursor/User/globalStorage/state.vscdb "SELECT value FROM ItemTable WHERE key = 'src.vs.platform.reactivestorage.browser.reactiveStorageServiceImpl.persistentStorage.applicationUser';" | python3 -c "import json, sys; data=json.load(sys.stdin); print(json.dumps(data.get('composerState', {}).get('modes4', []), indent=2))"

This reveals the complete internal structure of how Cursor stores custom modes - a far more detailed view than what's available through the UI!